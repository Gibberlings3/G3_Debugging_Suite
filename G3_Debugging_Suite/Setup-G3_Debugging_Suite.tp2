BACKUP ~G3_Debugging_Suite/backup~ // location to store files for uninstall purposes
AUTHOR ~webmaster@camagna.net~ // email address displayed if install fails  

VERSION ~3~ 
ASK_EVERY_COMPONENT

ALWAYS
  OUTER_SPRINT "prefix" ""
END

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Area Checker                                     \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Area Checker~
NO_LOG_RECORD // so it can be used as much as wanted

COPY ~G3_Debugging_Suite/blank.log~ ~override/debugger.log~
APPEND ~debugger.log~ "// Area Checker - Begin Log"

ACTION_IF FILE_EXISTS_IN_GAME ~xr2400.are~ THEN BEGIN

  // ensures are regexp search doesn't die
  COPY_EXISTING ~ar0087.are~ ~override/xr2400.are~
                ~ar0087.are~ ~override/xr2600.are~

END

// area checker
COPY_EXISTING_REGEXP GLOB ~^%prefix%.+\.are$~ ~override~
  PATCH_IF (SOURCE_SIZE < 0x11c) BEGIN // if invalid file
    PATCH_PRINT "%SOURCE_FILE% error: Corrupt file, below minimum file size"
    INNER_ACTION BEGIN
      APPEND ~debugger.log~ "%SOURCE_FILE% error: Corrupt file, below minimum file size"
    END
  END ELSE BEGIN
    READ_LONG  0x54 "actor_off"
    READ_SHORT 0x58 "actor_num"
    READ_SHORT 0x5a "info_num"
    READ_LONG  0x5c "info_off"
    READ_LONG  0x60 "spawn_off"
    READ_LONG  0x64 "spawn_num"
    READ_LONG  0x68 "ent_off"
    READ_LONG  0x6c "ent_num"
    READ_LONG  0x70 "cont_off"
    READ_SHORT 0x74 "cont_num"
    READ_SHORT 0x76 "item_num"
    READ_LONG  0x78 "item_off"
    READ_LONG  0x7c "vert_off"
    READ_SHORT 0x80 "vert_num"
    READ_SHORT 0x82 "amb_num"
    READ_LONG  0x84 "amb_off"
    READ_LONG  0x88 "var_off"
    READ_LONG  0x8c "var_num"
    READ_ASCII 0x94 "script"
    READ_LONG  0x9c "bmp_size"
    READ_LONG  0xa0 "bmp_off"
    READ_LONG  0xa4 "door_num"
    READ_LONG  0xa8 "door_off"
    READ_LONG  0xac "anim_num"
    READ_LONG  0xb0 "anim_off"
    READ_LONG  0xb4 "tiled_num"
    READ_LONG  0xb8 "tiled_off"
    READ_LONG  0xbc "song_off"
    READ_LONG  0xc0 "rest_off"
    READ_LONG  0xc4 "note_off"
    READ_LONG  0xc8 "note_num"
    SET "running_offset" = 0x11c
    SET "cont_running_index" = 0
    SET "vert_running_index" = 0
    
    // area script
    SET "exists" = 0
    SET "unassigned" = 0
    SET "missing" = 0
    INNER_PATCH_FILE ~%SOURCE_RES%.bcs~ BEGIN
      SET "exists" = 1
    END
    PATCH_IF (("%script%" STRING_EQUAL_CASE "%SOURCE_RES%") AND ("%exists%" = 0)) BEGIN
      SET "missing" = 1
    END
    PATCH_IF (NOT ("%script%" STRING_EQUAL_CASE "%SOURCE_RES%") AND ("%exists%" = 1)) BEGIN
      SET "unassigned" = 1
    END
    PATCH_IF ("%unassigned%" = 1) BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Area Script exists but is unassigned (%SOURCE_RES%.bcs)"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Area Script exists but is unassigned (%SOURCE_RES%.bcs)"
      END
    END
    PATCH_IF ("%missing%" = 1) BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Area Script assigned but nonexistant (%SOURCE_RES%.bcs)"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Area Script assigned but nonexistant (%SOURCE_RES%.bcs)"
      END
    END
  
    // check actors
    PATCH_IF ("%running_offset%" != "%actor_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Actor offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Actor offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%actor_num%" * 0x110))
    FOR (index = 0 ; index < actor_num ; index = index + 1) BEGIN
      READ_ASCII ("%actor_off%" + 0x48 + (0x110 * "%index%")) "resref" // dialog file
      SET "exists" = 0
      PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND ("%resref%" STRING_COMPARE_CASE "none")) BEGIN

        INNER_PATCH_FILE ~%resref%.dlg~ BEGIN
          SET "exists" = 1
        END
    
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Actor #%index% dialogue file does not exist (%resref%.dlg)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Actor #%index% dialogue file does not exist (%resref%.dlg)"
          END
        END
      END
      FOR (index2 = 0 ; index2 < 5 ; index2 = index2 + 1) BEGIN // check override scripts
        PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND ("%resref%" STRING_COMPARE_CASE "none")) BEGIN
          READ_ASCII ("%actor_off%" + 0x50 + (0x08 * "%index2%") + (0x110 * "%index%")) "resref"
          SET "exists" = 0
          PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND ("%resref%" STRING_COMPARE_CASE "none")) BEGIN
    
            INNER_PATCH_FILE ~%resref%.bcs~ BEGIN
              SET "exists" = 1
            END

            PATCH_IF ("%exists%" = 0) BEGIN
              PATCH_PRINT "%SOURCE_FILE% error: Actor #%index% script does not exist (%resref%.bcs)"
              INNER_ACTION BEGIN
                APPEND ~debugger.log~ "%SOURCE_FILE% error: Actor #%index% script does not exist (%resref%.bcs)"
              END
            END
          END  
        END
      END
      READ_ASCII ("%actor_off%" + 0x80 + (0x110 * "%index%")) "resref" // cre file
      PATCH_IF ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$") BEGIN // ignore creatures starting with RD
        SET "exists" = 0
    
        INNER_PATCH_FILE ~%resref%.cre~ BEGIN
          SET "exists" = 1
        END
    
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Actor #%index% does not exist (%resref%.cre)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Actor #%index% does not exist (%resref%.cre)"
          END
        END
      END
    END
  
    // check info points
    PATCH_IF ("%running_offset%" != "%info_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Info Point offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Info Point offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%info_num%" * 0xc4))
    FOR (index = 0 ; index < info_num ; index = index + 1) BEGIN
      // vertex count
      READ_SHORT ("%info_off%" + 0x2a + ("%index%" * 0xc4)) "vert_run_num"
      READ_LONG  ("%info_off%" + 0x2c + ("%index%" * 0xc4)) "vert_run_idx"
      PATCH_IF ("%vert_run_idx%" != "%vert_running_index%") BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Info Point #%index% has vertex index error (should be %vert_running_index%)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Info Point #%index% has vertex index error (should be %vert_running_index%)"
        END
      END
      SET "vert_running_index" = ("%vert_running_index%" + "%vert_run_num%")
      READ_SHORT ("%info_off%" + 0x20 + ("%index%" * 0xc4)) "type"
      PATCH_IF ("%type%" = 2) BEGIN
        READ_ASCII ("%info_off%" + 0x38 + ("%index%" * 0xc4)) "resref"
        READ_ASCII ("%info_off%" + 0x40 + ("%index%" * 0xc4)) "trans"
        SET "exists" = 0
        SET "trans_match" = 0
        INNER_PATCH_FILE ~%resref%.are~ BEGIN
          SET "exists" = 1
          READ_LONG  0x68 "ent_off2"
          READ_LONG  0x6c "ent_num2"
          FOR (index2 = 0 ; index2 < ent_num2 ; index2 = index2 + 1) BEGIN
            READ_ASCII ("%ent_off2%" +        ("%index2%" * 0x68)) "trans2"
            PATCH_IF ("%trans%" STRING_COMPARE_CASE "%trans2%" = 0) BEGIN
              SET "trans_match" = 1
              SET "index2" = "%ent_num2%" // kills loop
            END
          END
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Info Point #%index% has transition to non-existent area (%resref%.are)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Info Point #%index% has transition to non-existent area (%resref%.are)"
          END
        END
        PATCH_IF ("%trans_match%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Info Point #%index% has transition to non-existent entrance point (%resref%.are, %trans%)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Info Point #%index% has transition to non-existent entrance point (%resref%.are, %trans%)"
          END
        END
      END
      READ_SHORT ("%info_off%" + 0x68 + ("%index%" * 0xc4)) "trapped"
      PATCH_IF ("%trapped%" = 1) BEGIN
        READ_SHORT ("%info_off%" + 0x68 + ("%index%" * 0xc6)) "detected"
        READ_ASCII ("%info_off%" + 0x7c + ("%index%" * 0xc4)) "resref"
        SET "exists" = 0
        INNER_PATCH_FILE ~%resref%.bcs~ BEGIN
          SET "exists" = 1
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Info Point #%index% is trapped with no trap script (%resref%.bcs)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Info Point #%index% is trapped with no trap script (%resref%.bcs)"
          END
        END
        PATCH_IF ("%detected%" = 1) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Info Point #%index% is trapped and detected"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Info Point #%index% is trapped and detected"
          END
        END
      END
    END
  
    // check spawn points
    PATCH_IF ("%running_offset%" != "%spawn_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Spawn Point offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Spawn Point offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%spawn_num%" * 0xc8))
    FOR (index = 0 ; index < spawn_num ; index = index + 1) BEGIN
      FOR (index2 = 0 ; index2 < 10 ; index2 = index2 + 1) BEGIN
        READ_ASCII ("%spawn_off%" + 0x24 + ("%index2%" * 0x08) + ("%index%" * 0xc8)) "resref"
        PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND                  // ignore empty entries
                  ("%resref%" STRING_COMPARE_CASE "none") AND              // ignore 'none'
                  ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$")) BEGIN // ignore creatures starting with RD
          SET "exists" = 0
      
          INNER_PATCH_FILE ~%resref%.cre~ BEGIN
            SET "exists" = 1
          END
      
          PATCH_IF ("%exists%" = 0) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Spawn Point #%index% creature file does not exist (%resref%.cre)"
            INNER_ACTION BEGIN
              APPEND ~debugger.log~ "%SOURCE_FILE% error: Spawn Point #%index% creature file does not exist (%resref%.cre)"
            END
          END
        END
      END
    END
  
    // check entrance points
    PATCH_IF ("%running_offset%" != "%ent_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Entrances offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Entrances offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%ent_num%" * 0x68))
  
    // check containers
    PATCH_IF ("%running_offset%" != "%cont_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Containers offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Containers offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%cont_num%" * 0xc0))
    FOR (index = 0 ; index < cont_num ; index = index + 1) BEGIN // check indices
      // vertex count
      READ_LONG  ("%cont_off%" + 0x50 + ("%index%" * 0xc0)) "vert_run_idx"
      READ_SHORT ("%cont_off%" + 0x54 + ("%index%" * 0xc0)) "vert_run_num"
      PATCH_IF ("%vert_run_idx%" != "%vert_running_index%") BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Container #%index% has vertex index error (should be %vert_running_index%)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Container #%index% has vertex index error (should be %vert_running_index%)"
        END
      END
      SET "vert_running_index" = ("%vert_running_index%" + "%vert_run_num%")
      READ_SHORT ("%cont_off%" + 0x30 + ("%index%" * 0xc0)) "trapped"
      PATCH_IF ("%trapped%" = 1) BEGIN
        READ_SHORT ("%cont_off%" + 0x32 + ("%index%" * 0xc0)) "detected"
        PATCH_IF ("%detected%" = 1) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Container #%index% is trapped and detected"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Container #%index% is trapped and detected"
          END
        END
        READ_ASCII ("%cont_off%" + 0x48 + ("%index%" * 0xc0)) "resref"
        SET "exists" = 0
        INNER_PATCH_FILE ~%resref%.bcs~ BEGIN
          SET "exists" = 1
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Container #%index% is trapped with no trap script (%resref%.bcs)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Container #%index% is trapped with no trap script (%resref%.bcs)"
          END
        END
      END
      READ_LONG  ("%cont_off%" + 0x40 + ("%index%" * 0xc0)) "cont_item_idx"
      READ_LONG  ("%cont_off%" + 0x44 + ("%index%" * 0xc0)) "cont_item_num"
      PATCH_IF ("%cont_running_index%" != "%cont_item_idx%") BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Containers #%index% has an incorrect index"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Containers #%index% has an incorrect index"
        END
      END
      SET "cont_running_index" = "%cont_running_index%" + "%cont_item_num%"
    END
  
    // check items
    PATCH_IF ("%running_offset%" != "%item_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Items offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Items offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%item_num%" * 0x14))
    FOR (index = 0 ; index < item_num ; index = index + 1) BEGIN
      READ_ASCII ("%item_off%" +        (0x14 * "%index%")) "resref"
      SET "exists" = 0
  
      INNER_PATCH_FILE ~%resref%.itm~ BEGIN
        SET "exists" = 1
      END
  
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Item #%index% does not exist (%resref%.itm)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Item #%index% does not exist (%resref%.itm)"
        END
      END
    END
    // check ambients
    PATCH_IF ("%running_offset%" != "%amb_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Ambients offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Ambients offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%amb_num%" * 0xd4))
    FOR (index = 0 ; index < amb_num ; index = index + 1) BEGIN
      FOR (index2 = 0 ; index2 < 10 ; index2 = index2 + 1) BEGIN
        READ_ASCII ("%amb_off%" + 0x30 + ("%index2%" * 0x08) + (0xd4 * "%index%")) "resref"
        PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND ("%resref%" STRING_COMPARE_CASE "none")) BEGIN
          SET "exists" = 0
      
          INNER_PATCH_FILE ~%resref%.wav~ BEGIN
            SET "exists" = 1
          END
      
          PATCH_IF ("%exists%" = 0) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Ambient #%index% does not exist (%resref%.wav)"
            INNER_ACTION BEGIN
              APPEND ~debugger.log~ "%SOURCE_FILE% error: Ambient #%index% does not exist (%resref%.wav)"
            END
          END
        END
      END
    END
    // check variables
    PATCH_IF ("%running_offset%" != "%var_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Variables offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Variables offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%var_num%" * 0x54))
    // check doors
    PATCH_IF ("%running_offset%" != "%door_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Door offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Door offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%door_num%" * 0xc8))
    FOR (index = 0 ; index < door_num ; index = index + 1) BEGIN
      // vertex count
      FOR (index2 = 0 ; index2 < 4 ; index2 = index2 + 1) BEGIN
        PATCH_IF ("%index2%" = 0) BEGIN
          SET "idx_off" = 0x2c
          SET "num_off" = 0x30
        END ELSE
        PATCH_IF ("%index2%" = 1) BEGIN
          SET "idx_off" = 0x34
          SET "num_off" = 0x32
        END ELSE
        PATCH_IF ("%index2%" = 2) BEGIN
          SET "idx_off" = 0x48
          SET "num_off" = 0x4c
        END ELSE BEGIN
          SET "idx_off" = 0x50
          SET "num_off" = 0x4e
        END
        READ_LONG  ("%door_off%" + "%idx_off%" + ("%index%" * 0xc8)) "vert_run_idx"
        READ_SHORT ("%door_off%" + "%num_off%" + ("%index%" * 0xc8)) "vert_run_num"
        PATCH_IF ("%vert_run_idx%" != "%vert_running_index%") BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Door #%index% has vertex index error (should be %vert_running_index%)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Door #%index% has vertex index error (should be %vert_running_index%)"
          END
        END
        SET "vert_running_index" = ("%vert_running_index%" + "%vert_run_num%")
      END
      FOR (index2 = 0 ; index2 < 2 ; index2 = index2 + 1) BEGIN
        READ_ASCII ("%door_off%" + 0x58 + (0x08 * "%index2%") + ("%index%" * 0xc8)) "resref"
        PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND ("%resref%" STRING_COMPARE_CASE "none")) BEGIN
          SET "exists" = 0
  
          INNER_PATCH_FILE ~%resref%.wav~ BEGIN
            SET "exists" = 1
          END
  
          PATCH_IF ("%exists%" = 0) BEGIN
            PATCH_PRINT "%SOURCE_FILE% error: Door #%index% sound does not exist (%resref%.wav)"
            INNER_ACTION BEGIN
              APPEND ~debugger.log~ "%SOURCE_FILE% error: Door #%index% sound does not exist (%resref%.wav)"
            END
          END
        END
      END
      READ_SHORT ("%door_off%" + 0x70 + ("%index%" * 0xc8)) "trapped"
      PATCH_IF ("%trapped%" = 1) BEGIN
        READ_SHORT ("%door_off%" + 0x72 + ("%index%" * 0xc8)) "detected"
        PATCH_IF ("%detected%" = 1) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Door #%index% is trapped and detected"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Door #%index% is trapped and detected"
          END
        END
        READ_ASCII ("%door_off%" + 0x80 + ("%index%" * 0xc8)) "resref"
        SET "exists" = 0
        INNER_PATCH_FILE ~%resref%.bcs~ BEGIN
          SET "exists" = 1
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Door #%index% is trapped with no trap script (%resref%.bcs)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Door #%index% is trapped with no trap script (%resref%.bcs)"
          END
        END
      END
      READ_ASCII ("%door_off%" + 0x78 + ("%index%" * 0xc8)) "resref"
      PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND ("%resref%" STRING_COMPARE_CASE "none")) BEGIN // legit key entry      
        SET "exists" = 0
        INNER_PATCH_FILE ~%resref%.itm~ BEGIN
          SET "exists" = 1
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Door #%index% has non-existent key set (%resref%.itm)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Door #%index% has non-existent key set (%resref%.itm)"
          END
        END
        READ_LONG ("%door_off%" + 0x8c + ("%index%" * 0xc8)) "lockdiff"
        PATCH_IF ("%lockdiff%" < 100) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Door #%index% requires key (%resref%.itm) but the lock can be picked"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Door #%index% requires key (%resref%.itm) but the lock can be picked"
          END
        END
        READ_BYTE ("%door_off%" + 0x28 + ("%index%" * 0xc8)) "flags"
        PATCH_IF (("%flags%" BAND 0b00000010) != 0b00000010) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Door #%index% requires key (%resref%.itm) but the door is not locked"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Door #%index% requires key (%resref%.itm) but the door is not locked"
          END
        END
      END
    END
    // check tiled objects
    PATCH_IF ("%running_offset%" != "%tiled_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Tiled Objects offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Tiled Objects offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%tiled_num%" * 0x6c))
    // check vertices
    PATCH_IF ("%running_offset%" != "%vert_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Vertices offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Vertices offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%vert_num%" * 0x04))
    // check animations
    PATCH_IF ("%running_offset%" != "%anim_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Animations offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Animations offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%anim_num%" * 0x4c))
    FOR (index = 0 ; index < anim_num ; index = index + 1) BEGIN
      READ_ASCII ("%anim_off%" + 0x28 + (0x4c * "%index%")) "resref"
      SET "exists" = 0
  
      INNER_PATCH_FILE ~%resref%.bam~ BEGIN
        SET "exists" = 1
      END
  
      INNER_PATCH_FILE ~%resref%.vvc~ BEGIN
        SET "exists" = 1
      END
  
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Animation #%index% does not exist (%resref%.bam or %resref%.vvc)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Ambient #%index% does not exist (%resref%.bam or %resref%.vvc)"
        END
      END
    END
    // check bitmap
    PATCH_IF ("%running_offset%" != "%bmp_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Bitmap offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Bitmap offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + "%bmp_size%")
    // check songs block
    PATCH_IF ("%running_offset%" != "%song_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Songs offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Songs offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + 0x90)
    // check rest spawn block
    PATCH_IF ("%running_offset%" != "%rest_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Rest Spawn offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Rest Spawn offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + 0xe4)
    FOR (index = 0 ; index < 10 ; index = index + 1) BEGIN
      READ_ASCII ("%rest_off%" + 0x48 + ("%index%" * 0x08)) "resref"
      PATCH_IF (("%resref%" STRING_COMPARE_CASE "") AND                  // ignore empty entries
                ("%resref%" STRING_COMPARE_CASE "none") AND              // ignore 'none'
                ("%resref%" STRING_COMPARE_REGEXP "^[Rr][Dd].+$")) BEGIN // ignore creatures starting with RD
        SET "exists" = 0
  
        INNER_PATCH_FILE ~%resref%.cre~ BEGIN
          SET "exists" = 1
        END
  
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Rest Spawn creature file does not exist (%resref%.cre)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Rest Spawn creature file does not exist (%resref%.cre)"
          END
        END
      END
    END
    // check map notes
    PATCH_IF ("%running_offset%" != "%note_off%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Map Notes offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Map Notes offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%note_num%" * 0x34))
  END
  BUT_ONLY_IF_IT_CHANGES

APPEND ~debugger.log~ "// Item and Spell Index Checker - End Log"
COPY ~override/debugger.log~ ~G3_Debugging_Suite/debugger_area_checker.log~

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Creature Checker                                 \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Creature Checker~
NO_LOG_RECORD // so it can be used as much as wanted

COPY ~G3_Debugging_Suite/blank.log~ ~override/debugger.log~
APPEND ~debugger.log~ "// Item and Spell Index Checker - Begin Log"

// index checker
COPY_EXISTING_REGEXP GLOB ~^%prefix%.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE < 0x2d4) BEGIN
    PATCH_PRINT "%SOURCE_FILE%: Invalid, below minimum size"
    INNER_ACTION BEGIN
      APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid, below minimum size"
    END
  END ELSE BEGIN
    READ_LONG  0x08 "name"
    READ_LONG  0x0c "app_name"
    READ_BYTE  0x33 "fx_type"
    READ_ASCII 0x34 "port_sm"
    READ_ASCII 0x3c "port_lg"
    READ_BYTE  0x237 "sex"
    READ_BYTE  0x275 "gender"
    READ_LONG  0x2a0 "known_off"
    READ_LONG  0x2a4 "known_num"
    READ_LONG  0x2a8 "meminfo_off"
    READ_LONG  0x2ac "meminfo_num"
    READ_LONG  0x2b0 "mem_off"
    READ_LONG  0x2b4 "mem_num"
    READ_LONG  0x2b8 "slot_off"
    READ_LONG  0x2bc "item_off"
    READ_LONG  0x2c0 "item_num"
    READ_LONG  0x2c4 "fx_off"
    READ_LONG  0x2c8 "fx_num"
    READ_ASCII 0x2cc "dialog"
    SET "running_offset" = 0x2d4
    SET "running_spl_idx" = 0
    // check name match
    PATCH_IF (("%name%" != "%app_name%") AND ("%name%" < 0) AND ("%app_name%" < 0)) BEGIN
      PATCH_PRINT "%SOURCE_FILE%: name fields do not match"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: name fields do not match"
      END
    END
    // check portraits
    PATCH_IF (("%port_sm%" STRING_COMPARE_CASE "") AND ("%port_sm%" STRING_COMPARE_CASE "none")) BEGIN
      SET "exists" = 0
      INNER_PATCH_FILE ~%port_sm%.bmp~ BEGIN
        SET "exists" = 1
      END
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Small Portrait does not exist (%port_sm%.bmp)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Small Portrait does not exist (%port_sm%.bmp)"
        END
      END
    END
    PATCH_IF (("%port_lg%" STRING_COMPARE_CASE "") AND ("%port_lg%" STRING_COMPARE_CASE "none")) BEGIN
      SET "exists" = 0
      INNER_PATCH_FILE ~%port_lg%.bmp~ BEGIN
        SET "exists" = 1
      END
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Large Portrait does not exist (%port_lg%.bmp)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Large Portrait does not exist (%port_lg%.bmp)"
        END
      END
    END
    // check for BG profs
    FOR (index = 0; index < 8; index = index + 1) BEGIN
      READ_BYTE (0x6e + "%index%") "prof"
      PATCH_IF ("%prof%" > 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Has BG proficiencies set"
        SET "index" = 8 // kills loop
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE%: Has BG proficiencies set"
        END
      END
    END
    // sex-gender check
    // gender can have broader range of values, but still worth checking
    PATCH_IF ((("%gender%" = 1) AND ("%sex%" != 1)) OR     // male
              (("%gender%" = 2) AND ("%sex%" != 2)) OR     // female
              (("%gender%" = 4) AND ("%sex%" != 3)) OR     // neither
              (("%gender%" = 5) AND ("%sex%" != 4))) BEGIN // both
      PATCH_PRINT "%SOURCE_FILE%: Gender and Sex do not match"
      SET "index" = 8 // kills loop
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Gender and Sex do not match"
      END
    END
    // check attributes
    FOR (index = 0 ; index < 7 ; index = index + 1) BEGIN
      READ_BYTE (0x238 + "%index%") "attrib"
      PATCH_IF (("%attrib%" < 3) OR ("%attrib%" > 25)) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Attributes fall outside min/max"
        SET "index" = 7 // kills loop
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE%: Attributes fall outside min/max"
        END
      END
      PATCH_IF ("%index%" = 0) BEGIN // skip over exceptional strength field
        SET "index" = "%index%" + 1
      END
    END
    // check script existence
    FOR (index = 0 ; index < 5 ; index = index + 1) BEGIN
      READ_ASCII (0x248 + (0x08 * "%index%")) "script"  
      PATCH_IF (("%script%" STRING_COMPARE_CASE "") AND ("%script%" STRING_COMPARE_CASE "none")) BEGIN // ignore 'None' entries
        SET "exists" = 0
        INNER_PATCH_FILE ~%script%.bcs~ BEGIN
          SET "exists" = 1
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Script does not exist (%script%.bcs)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Script does not exist (%script%.bcs)"
          END
        END
      END
    END
    // check dialog file
    PATCH_IF (("%dialog%" STRING_COMPARE_CASE "") AND ("%dialog%" STRING_COMPARE_CASE "none")) BEGIN // ignore 'None' entries
      SET "exists" = 0
      INNER_PATCH_FILE ~%dialog%.dlg~ BEGIN
        SET "exists" = 1
      END
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Dialogue does not exist (%dialog%.dlg)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Dialogue does not exist (%dialog%.dlg)"
        END
      END
    END
    // check known spells
    PATCH_IF ("%known_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Known Spells offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Known Spells offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%known_num%" * 0x0c))
    FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
      READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
      SET "exists" = 0
      INNER_PATCH_FILE ~%resref%.spl~ BEGIN
        READ_SHORT 0x1c "spl_type"
        READ_LONG  0x34 "spl_level"
        SET "exists" = 1
      END
      PATCH_IF ("%exists%" = 1) BEGIN
        READ_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) "level"
        READ_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) "type"
        SET "level" = "%level%" + 1
        PATCH_IF ("%level%" != "%spl_level%") BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: %resref%.spl level in Known Spells section does not match spell file"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: %resref%.spl level in Known Spells section does not match spell file"
          END
        END
        PATCH_IF ((("%type%" = 0) AND ("%spl_type%" != 2)) OR     // priest
                  (("%type%" = 1) AND ("%spl_type%" != 1)) OR     // mage
                  (("%type%" = 2) AND ("%spl_type%" != 4))) BEGIN // innate
          PATCH_PRINT "%SOURCE_FILE% error: %resref%.spl type in Known Spells section does not match spell file"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: %resref%.spl type in Known Spells section does not match spell file"
          END
        END
      END ELSE BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: %resref%.spl in Known Spells section does not exist"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: %resref%.spl in Known Spells section does not exist"
        END
      END
    END
    // check spell memorization info
    PATCH_IF ("%meminfo_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Memorization Info offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Memorization Info offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%meminfo_num%" * 0x10))
    PATCH_IF ("%meminfo_num%" != 17) BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Memorization Info length is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Memorization Info length is incorrect"
      END
    END
    FOR (index = 0 ; index < meminfo_num ; index = index + 1) BEGIN
      READ_LONG ("%meminfo_off%" + 0x08 + (0x10 * "%index%")) "meminfo_spl_idx"
      READ_LONG ("%meminfo_off%" + 0x0c + (0x10 * "%index%")) "meminfo_spl_num"
      PATCH_IF ("%meminfo_spl_idx%" != "%running_spl_idx%") BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Memorization Info index is incorrect"
        SET "index" = "%meminfo_num%" // kills loop
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Memorization Info index is incorrect"
        END
      END
      SET "running_spl_idx" = ("%running_spl_idx%" + "%meminfo_spl_num%")
    END
    // check memorized spells
    PATCH_IF ("%mem_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Memorized Spells offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Memorized Spells offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%mem_num%" * 0x0c))
    FOR (index = 0 ; index < mem_num ; index = index + 1) BEGIN
      READ_ASCII ("%mem_off%" +        ("%index%" * 0x0c)) "resref"
      SET "exists" = 0
      INNER_PATCH_FILE ~%resref%.spl~ BEGIN
        SET "exists" = 1
      END
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: %resref%.spl in Memorized Spells section does not exist"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: %resref%.spl in Memorized Spells section does not exist"
        END
      END
    END
    // check effects
    PATCH_IF ("%fx_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Effects offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Effects offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%fx_num%" * (0x30 + ("%fx_type%" * 0xd8))))
    // check items
    PATCH_IF ("%item_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Item offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Item offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + ("%item_num%" * 0x14))
    FOR (index = 0 ; index < item_num ; index = index + 1) BEGIN
      READ_ASCII ("%item_off%" +        ("%index%" * 0x14)) "resref"
      SET "exists" = 0
      INNER_PATCH_FILE ~%resref%.itm~ BEGIN
        SET "exists" = 1
      END
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Item does not exist (%resref%.itm)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Item does not exist (%resref%.itm)"
        END
      END
    END
    // check slot offset
    PATCH_IF ("%slot_off%" != "%running_offset%") BEGIN
      PATCH_PRINT "%SOURCE_FILE% error: Item Slot offset is incorrect"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% error: Item Slot offset is incorrect"
      END
    END
    SET "running_offset" = ("%running_offset%" + 0x4e)
  END
  BUT_ONLY_IF_IT_CHANGES

APPEND ~debugger.log~ "// Item and Spell Index Checker - End Log"
COPY ~override/debugger.log~ ~G3_Debugging_Suite/debugger_creature_checker.log~

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Creature Inventory Checker                       \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Creature Inventory Checker~
NO_LOG_RECORD // so it can be used as much as wanted

COPY ~G3_Debugging_Suite/blank.log~ ~override/debugger.log~
APPEND ~debugger.log~ "// BG2 Creature Inventory Checker - Begin Log"

COPY_EXISTING_REGEXP GLOB ~^%prefix%.+\.cre$~ ~override~
  PATCH_IF (SOURCE_SIZE < 0x2d4) BEGIN
    PATCH_PRINT "%SOURCE_FILE%: Invalid, below minimum size"
    INNER_ACTION BEGIN
      APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid, below minimum size"
    END
  END ELSE BEGIN
    READ_LONG  0x2b8 "slot_off" ELSE 0
    READ_LONG  0x2bc "itm_off" ELSE 0
    READ_LONG  0x2c0 "itm_num" ELSE 0
    READ_SHORT ("%slot_off%" + 0x4c) "equipped_weapon"
    // tracking variables
    SET "2hweapon" = 0
    SET "offhand" = 0
    SET "bow" = 0
    SET "arrows" = 0
    SET "xbow" = 0
    SET "bolts" = 0
    SET "sling" = 0
    SET "bullets" = 0
    SET "helm" = 0
    SET "armor" = 0
    SET "gloves" = 0
    SET "lring" = 0
    SET "rring" = 0
    SET "boots" = 0
    SET "belt" = 0
    SET "amulet" = 0
    SET "weapon1" = 0
    SET "weapon2" = 0
    SET "weapon3" = 0
    SET "weapon4" = 0
    SET "quiver1" = 0
    SET "quiver2" = 0
    SET "quiver3" = 0
    SET "quiver4" = 0
    SET "cloak" = 0
    FOR (index = 0 ; index < 36 ; index = index + 1) BEGIN
      READ_SHORT ("%slot_off%" + (0x02 * "%index%")) "ref"
      PATCH_IF ("%ref%" != 0xffff) BEGIN
        READ_ASCII ("%itm_off%" + (0x14 * "%ref%")) "item"
  
          INNER_PATCH_FILE ~%item%.itm~ BEGIN
  
            READ_SHORT 0x1c "type"
            READ_BYTE 0x18 "flags"
            PATCH_IF ("%index%" = 0) BEGIN // helm slot
              SET "helm" = 1
              PATCH_IF ("%type%" != 7) BEGIN // helm
                PATCH_PRINT ~%SOURCE_FILE% Invalid helm %item%.itm~
                INNER_ACTION BEGIN
                  APPEND ~debugger.log~ "%SOURCE_FILE% Invalid helm %item%.itm"
                END
              END
            END ELSE
            PATCH_IF ("%index%" = 1) BEGIN // armor slot
              SET "armor" = 1
              PATCH_IF ("%type%" != 2) BEGIN // armor
                PATCH_PRINT ~%SOURCE_FILE%: Invalid armor: %item%.itm~
                INNER_ACTION BEGIN
                  APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid armor: %item%.itm"
                END
              END
            END ELSE
            PATCH_IF ("%index%" = 2) BEGIN // shield slot
              SET "offhand" = 1
              PATCH_IF (("%flags%" BAND 0b00000010) = 0b00000010) BEGIN // 2h check
                PATCH_PRINT ~%SOURCE_FILE%: Two-handed offhand: %item%.itm~
                INNER_ACTION BEGIN
                  APPEND ~debugger.log~ "%SOURCE_FILE%: Two-handed offhand: %item%.itm"
                END
              END
              PATCH_IF ("%type%" != 12) BEGIN // if not shield, check for valid melee abilities
                SET "legit_offhand" = 0
                READ_LONG  0x64 "abil_off"
                READ_SHORT 0x68 "abil_num"
                FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                  READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                  PATCH_IF ("%ability%" = 1) BEGIN // only melee allowed in offhand
                    SET "legit_offhand" = 1
                  END
                END
                PATCH_IF ("%legit_offhand%" = 0) BEGIN
                  PATCH_PRINT ~%SOURCE_FILE%: Invalid offhand item: %item%.itm~
                  INNER_ACTION BEGIN
                    APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid offhand item: %item%.itm"
                  END
                END
              END
            END ELSE
            PATCH_IF ("%index%" = 3) BEGIN // glove slot
              SET "gloves" = 1
              PATCH_IF ("%type%" != 6) BEGIN // gloves
                PATCH_PRINT ~%SOURCE_FILE%: Invalid gloves: %item%.itm~
                INNER_ACTION BEGIN
                  APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid gloves: %item%.itm"
                END
              END
            END ELSE
            PATCH_IF (("%index%" = 4) OR ("%index%" = 5)) BEGIN // ring slot
              PATCH_IF ("%index%" = 4) BEGIN
                SET "lring" = 1
              END ELSE BEGIN
                SET "rring" = 1
              END
              PATCH_IF ("%type%" != 10) BEGIN // rings
                PATCH_PRINT ~%SOURCE_FILE%: Invalid ring: %item%.itm~
                INNER_ACTION BEGIN
                  APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid ring: %item%.itm"
                END
              END
            END ELSE
            PATCH_IF ("%index%" = 6) BEGIN // amulet slot
              SET "amulet" = 1
              PATCH_IF ("%type%" != 1) BEGIN // amulet
                PATCH_PRINT ~%SOURCE_FILE%: Invalid amulet: %item%.itm~
                INNER_ACTION BEGIN
                  APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid amulet: %item%.itm"
                END
              END
            END ELSE
            PATCH_IF ("%index%" = 7) BEGIN // belt slot
              SET "belt" = 1
              PATCH_IF ("%type%" != 3) BEGIN // belt
                PATCH_PRINT ~%SOURCE_FILE%: Invalid belt: %item%.itm~
                INNER_ACTION BEGIN
                  APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid belt: %item%.itm"
                END
              END
            END ELSE
            PATCH_IF ("%index%" = 8) BEGIN // boot slot
              SET "boots" = 1
              PATCH_IF ("%type%" != 4) BEGIN // boot
                PATCH_PRINT ~%SOURCE_FILE%: Invalid boots: %item%.itm~
                INNER_ACTION BEGIN
                  APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid boots: %item%.itm"
                END
              END
            END ELSE
            PATCH_IF (("%index%" > 8) AND
                      ("%index%" < 13)) BEGIN // weapon slots
              PATCH_IF ("%index%" = 9) BEGIN // first weapon slot
                SET "weapon1" = 1
              END ELSE
              PATCH_IF ("%index%" = 10) BEGIN // second weapon slot
                SET "weapon2" = 1
              END ELSE
              PATCH_IF ("%index%" = 11) BEGIN // third weapon slot
                SET "weapon3" = 1
              END ELSE BEGIN
               SET "weapon4" = 1
              END
              READ_LONG  0x64 "abil_off"
              READ_SHORT 0x68 "abil_num"
              SET "legit_weapon" = 0
              FOR (index3 = 0 ; index3 < abil_num ; index3 = index3 + 1) BEGIN
                READ_BYTE ("%abil_off%" + (0x38 * "%index3%")) "ability"
                PATCH_IF (("%ability%" = 1) OR ("%ability%" = 2) OR ("%ability%" = 4)) BEGIN // melee, ranged, or launcher
                  SET "legit_weapon" = 1
                  PATCH_IF ("%index%" = 9) BEGIN // first weapon slot
                    SET "weapon1" = 2
                  END ELSE
                  PATCH_IF ("%index%" = 10) BEGIN // second weapon slot
                    SET "weapon2" = 2
                  END ELSE
                  PATCH_IF ("%index%" = 11) BEGIN // third weapon slot
                    SET "weapon3" = 2
                  END ELSE BEGIN
                    SET "weapon4" = 2
                  END
                  PATCH_IF (("%flags%" BAND 0b00000010) = 0b00000010) BEGIN // 2h check
                    SET "2hweapon" = 1
                  END
                  PATCH_IF ("%ability%" = 4) BEGIN // requires ammo
                    PATCH_IF ("%bow%" = 0) BEGIN
                      READ_SHORT ("%abil_off%" + 0x32 + (0x38 * "%index3%")) "bow"
                    END
                    PATCH_IF ("%xbow%" = 0) BEGIN
                      READ_SHORT ("%abil_off%" + 0x34 + (0x38 * "%index3%")) "xbow"
                    END
                    PATCH_IF ("%sling%" = 0) BEGIN
                      READ_SHORT ("%abil_off%" + 0x36 + (0x38 * "%index3%")) "sling"
                    END
                  END
                END
              END
              PATCH_IF ("%legit_weapon%" = 0) BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Invalid weapon: %item%.itm~
                INNER_ACTION BEGIN
                  APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid weapon: %item%.itm"
                END
              END
            END ELSE
            PATCH_IF (("%index%" > 12) AND ("%index%" < 17)) BEGIN // quiver slots
              PATCH_IF ("%index%" = 13) BEGIN // first quiver slot
                SET "quiver1" = 1
              END ELSE
              PATCH_IF ("%index%" = 14) BEGIN // second quiver slot
                SET "quiver2" = 1
              END ELSE
              PATCH_IF ("%index%" = 15) BEGIN // third quiver slot
                SET "quiver3" = 1
              END ELSE BEGIN
                SET "quiver4" = 1 // fourth quiver slot
              END
              PATCH_IF ("%type%" = 5) BEGIN
                SET "arrows" = 1
              END ELSE
              PATCH_IF ("%type%" = 31) BEGIN
                SET "bolts" = 1
              END ELSE
              PATCH_IF ("%type%" = 14) BEGIN
                SET "bullets" = 1
              END ELSE BEGIN
                PATCH_PRINT ~%SOURCE_FILE%: Invalid quiver: %item%.itm~
                INNER_ACTION BEGIN
                  APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid quiver: %item%.itm"
                END
              END
            END ELSE
            PATCH_IF ("%index%" = 17) BEGIN // cloak
              SET "cloak" = 1
              PATCH_IF ("%type%" != 32) BEGIN // cloak
                PATCH_PRINT ~%SOURCE_FILE%: Invalid cloak: %item%.itm~
                INNER_ACTION BEGIN
                  APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid cloak: %item%.itm"
                END
              END
            END ELSE
            PATCH_IF (
                       (
                         (
                           ("%type%" =  1) AND  // amulet
                           ("%amulet%" = 0)
                         ) OR (
                           ("%type%" =  2) AND // armor
                           ("%armor%" = 0)
                         ) OR (
                           ("%type%" =  3) AND // belt
                           ("%belt%" = 0)
                         ) OR (
                           ("%type%" =  4) AND // boot
                           ("%boots%" = 0)
                         ) OR (
                           (
                             ("%type%" =  5) OR // arrows
                             ("%type%" = 14) OR // bullets
                             ("%type%" = 31)    // bolts
                           ) AND (
                             ("%quiver1%" = 0) OR
                             ("%quiver2%" = 0) OR
                             ("%quiver3%" = 0) OR
                             ("%quiver4%" = 0)
                           )
                         ) OR (
                           ("%type%" =  6) AND // gloves
                           ("%gloves%" = 0)
                         ) OR (
                           ("%type%" =  7) AND // helm
                           ("%helm%" = 0)
                         ) OR (
                           ("%type%" = 10) AND ( // ring
                             ("%lring%" = 0) OR
                             ("%rring%" = 0)
                           )
                         ) OR (
                           ("%type%" = 12) AND// shield
                           ("%offhand%" = 0)
                         ) OR (
                           (
                             ("%type%" = 15) OR // bow
                             ("%type%" = 16) OR // dagger
                             ("%type%" = 17) OR // maces
                             ("%type%" = 18) OR // sling
                             ("%type%" = 19) OR // short sword
                             ("%type%" = 20) OR // swords
                             ("%type%" = 21) OR // hammer
                             ("%type%" = 22) OR // morning stars
                             ("%type%" = 23) OR // flail
                             ("%type%" = 24) OR // darts
                             ("%type%" = 25) OR // axe
                             ("%type%" = 26) OR // staff
                             ("%type%" = 27) OR // xbow
                             ("%type%" = 28) OR // hand to hand
                             ("%type%" = 29) OR // Spear
                             ("%type%" = 30) OR // halberd
                             ("%type%" = 32) OR // cloak
                             ("%type%" = 44)    // club
                           ) AND (
                             ("%weapon1%" = 0) OR
                             ("%weapon2%" = 0) OR
                             ("%weapon3%" = 0) OR
                             ("%weapon4%" = 0)
                           )
                         )
                       ) AND ("%index%" > 17) // inventory/quick slots
                     )  BEGIN
              PATCH_PRINT ~%SOURCE_FILE%: Equippable items in inventory: %item%.itm~
              INNER_ACTION BEGIN
                APPEND ~debugger.log~ "%SOURCE_FILE%: Equippable items in inventory: %item%.itm"
              END
            END
  

        END
      END
    END
    PATCH_IF (("%2hweapon%" = 1) AND ("%offhand%" = 1)) BEGIN
      PATCH_PRINT ~%SOURCE_FILE%: Two-hand weapon and offhand equipped~
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Two-hand weapon and offhand equipped"
      END
    END
    PATCH_IF (("%bow%" = 1) AND ("%arrows%" = 0)) BEGIN
      PATCH_PRINT ~%SOURCE_FILE%: Bow with no arrows~
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Bow with no arrows"
      END
    END ELSE
    PATCH_IF (("%bow%" = 0) AND ("%arrows%" = 1)) BEGIN
      PATCH_PRINT ~%SOURCE_FILE%: Arrows with no bow~
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Arrows with no bow"
      END
    END
    PATCH_IF (("%xbow%" = 1) AND ("%bolts%" = 0)) BEGIN
      PATCH_PRINT ~%SOURCE_FILE%: Crossbow with no bolts~
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Crossbow with no bolts"
      END
    END ELSE
    PATCH_IF (("%xbow%" = 0) AND ("%bolts%" = 1)) BEGIN
      PATCH_PRINT ~%SOURCE_FILE%: Bolts with no crossbow~
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Bolts with no crossbow"
      END
    END
    PATCH_IF (("%sling%" = 1) AND ("%bullets%" = 0)) BEGIN
      PATCH_PRINT ~%SOURCE_FILE%: Sling with no bullets~
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Sling with no bullets"
      END
    END ELSE
    PATCH_IF (("%sling%" = 0) AND ("%bullets%" = 1)) BEGIN
      PATCH_PRINT ~%SOURCE_FILE%: Bullets with no sling~
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Bullets with no sling"
      END
    END
    PATCH_IF (("%equipped_weapon%" = 0) AND ("%weapon1%" != 2) AND (("%weapon2%" = 2) OR ("%weapon3%" = 2) OR ("%weapon4%" = 2))) BEGIN
      PATCH_PRINT ~%SOURCE_FILE%: Invalid weapon equipped~
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid weapon equipped"
      END
    END ELSE
    PATCH_IF (("%equipped_weapon%" = 1) AND ("%weapon2%" != 2) AND (("%weapon1%" = 2) OR ("%weapon3%" = 2) OR ("%weapon4%" = 2))) BEGIN
      PATCH_PRINT ~%SOURCE_FILE%: Invalid weapon equipped~
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid weapon equipped"
      END
    END ELSE
    PATCH_IF (("%equipped_weapon%" = 2) AND ("%weapon3%" != 2) AND (("%weapon1%" = 2) OR ("%weapon2%" = 2) OR ("%weapon4%" = 2))) BEGIN
      PATCH_PRINT ~%SOURCE_FILE%: Invalid weapon equipped~
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid weapon equipped"
      END
    END ELSE
    PATCH_IF (("%equipped_weapon%" = 3) AND ("%weapon4%" != 2) AND (("%weapon1%" = 2) OR ("%weapon2%" = 2) OR ("%weapon3%" = 2))) BEGIN
      PATCH_PRINT ~%SOURCE_FILE%: Invalid weapon equipped~
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid weapon equipped"
      END
    END
  END
  BUT_ONLY_IF_IT_CHANGES

APPEND ~debugger.log~ "// BG2 Creature Inventory Checker - End Log"
COPY ~override/debugger.log~ ~G3_Debugging_Suite/debugger_creature_inventory_checker.log~

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Item Checker                                     \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
  
BEGIN ~Item Checker~
NO_LOG_RECORD // so it can be used as much as wanted

COPY ~G3_Debugging_Suite/blank.log~ ~override/debugger.log~
APPEND ~debugger.log~ "// Item Checker - Begin Log"

// index checker
COPY_EXISTING_REGEXP GLOB ~^%prefix%.+\.itm$~ ~override~
  PATCH_IF (SOURCE_SIZE < 0x72) BEGIN
    PATCH_PRINT "%SOURCE_FILE%: Invalid, below minimum size"
    INNER_ACTION BEGIN
      APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid, below minimum size"
    END
  END ELSE BEGIN
    READ_BYTE  0x18 "flags"
    READ_ASCII 0x3a "icon"
    READ_ASCII 0x44 "ground_icon"
    READ_ASCII 0x58 "carried_icon"
    READ_LONG  0x60 "enchantment"
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"
    SET "fx_run_idx" = "%fx_num%"
    PATCH_IF (("%enchantment%" > 0) AND (("%flags%" BAND 0b01000000) != 0b01000000)) BEGIN
      PATCH_PRINT "%SOURCE_FILE%: Disagreement between enchantment and magical flag %flags%"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Disagreement between enchantment and magical flag"
      END
    END
    PATCH_IF (("%icon%" STRING_COMPARE_CASE "") AND ("%icon%" STRING_COMPARE_CASE "none")) BEGIN
      SET "exists" = 0
      INNER_PATCH_FILE ~%icon%.bam~ BEGIN
        SET "exists" = 1
      END
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Icon does not exist (%icon%.bam)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Icon does not exist (%icon%.bam)"
        END
      END
    END
    PATCH_IF (("%ground_icon%" STRING_COMPARE_CASE "") AND ("%ground_icon%" STRING_COMPARE_CASE "none")) BEGIN
      SET "exists" = 0
      INNER_PATCH_FILE ~%ground_icon%.bam~ BEGIN
        SET "exists" = 1
      END
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Ground Icon does not exist (%ground_icon%.bam)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Ground Icon does not exist (%ground_icon%.bam)"
        END
      END
    END
    PATCH_IF (("%carried_icon%" STRING_COMPARE_CASE "") AND ("%carried_icon%" STRING_COMPARE_CASE "none")) BEGIN
      SET "exists" = 0
      INNER_PATCH_FILE ~%carried_icon%.bam~ BEGIN
        SET "exists" = 1
      END
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Carried Icon does not exist (%carried_icon%.bam)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Carried Icon does not exist (%carried_icon%.bam)"
        END
      END
    END
    PATCH_IF ("%abil_off%" != 0x72) BEGIN
      PATCH_PRINT "%SOURCE_FILE%: Abilities do not start at the proper offset"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Abilities do not start at the proper offset"
      END
    END
    PATCH_IF ("%fx_off%" != (0x72 + ("%abil_num%" * 0x38))) BEGIN
      PATCH_PRINT "%SOURCE_FILE%: Effects do not start at the proper offset"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Effects do not start at the proper offset"
      END
    END
    FOR (index = 0; index < abil_num; index = index + 1) BEGIN
      SET "duration_check" = 0
      SET "app_duration" = (0 - 1)
      READ_BYTE  ("%abil_off%" + 0x00 + (0x38 * "%index%")) "type"
      READ_BYTE  ("%abil_off%" + 0x02 + (0x38 * "%index%")) "slot"
      READ_ASCII ("%abil_off%" + 0x04 + (0x38 * "%index%")) "abil_icon"
      READ_SHORT ("%abil_off%" + 0x1e + (0x38 * "%index%")) "abil_fx_num"
      READ_SHORT ("%abil_off%" + 0x20 + (0x38 * "%index%")) "abil_fx_idx"
      PATCH_IF (((("%type%" = 1) OR ("%type%" = 2) OR ("%type%" = 4)) AND ("%slot%" != 1)) OR // melee/ranged not in weapons slot
                (("%type%" = 3) AND ("%slot%" != 3))) BEGIN                                   // or magical not in item slots
        PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% appears in wrong place"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Ability #%index% appears in wrong place"
        END
      END
      PATCH_IF ("%type%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% is extraneous Default(0) type"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Ability #%index% is extraneous Default(0) type"
        END
      END
      PATCH_IF (("%abil_icon%" STRING_COMPARE_CASE "") AND ("%abil_icon%" STRING_COMPARE_CASE "none")) BEGIN
        SET "exists" = 0
        INNER_PATCH_FILE ~%abil_icon%.bam~ BEGIN
          SET "exists" = 1
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% icon does not exist (%abil_icon%.bam)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Ability #%index% icon does not exist (%abil_icon%.bam)"
          END
        END
      END
      PATCH_IF ("%fx_run_idx%" = "%abil_fx_idx%") BEGIN
        SET "fx_run_idx" = ("%fx_run_idx%" + "%abil_fx_num%")
      END ELSE BEGIN
        PATCH_PRINT "%SOURCE_FILE% has an index error"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE%: Ability #%index% has an index error"
        END
      END
      FOR (index2 = 0 ; index2 < abil_fx_num ; index2 = index2 + 1) BEGIN
        READ_SHORT ("%fx_off%" +        (("%index2%" + "%abil_fx_idx%") * 0x30)) "opcode"
        READ_BYTE  ("%fx_off%" + 0x0c + (("%index2%" + "%abil_fx_idx%") * 0x30)) "timing"
        READ_LONG  ("%fx_off%" + 0x0e + (("%index2%" + "%abil_fx_idx%") * 0x30)) "duration"
        PATCH_IF ((("%timing%" = 1) OR ("%timing%" = 9)) AND ("%duration%" > 0)) BEGIN
          PATCH_PRINT "%SOURCE_FILE%: Ability #%index% has a permanent effect with non-zero duration (effect #%index2%, opcode %opcode%)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE%: Ability #%index% has a permanent effect with non-zero duration (effect #%index2%, opcode %opcode%)"
          END
        END
        PATCH_IF (("%timing%" = 2) OR ("%timing%" = 5) OR ("%timing%" = 6) OR ("%timing%" = 8)) BEGIN
          PATCH_PRINT "%SOURCE_FILE%: Ability #%index% has an effect with incorrect/unknown timing (effect #%index2%, opcode %opcode%)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE%: Ability #%index% has an effect with incorrect/unknown timing (effect #%index2%, opcode %opcode%)"
          END
        END
        PATCH_IF (("%timing%" = 0) OR ("%timing%" = 3) OR ("%timing%" = 4) OR ("%timing%" = 7)) BEGIN
          PATCH_IF (("%duration_check%" = 0) AND ("%duration%" > 5)) BEGIN
            PATCH_IF ("%app_duration%" < 0) BEGIN
              SET "app_duration" = "%duration%"
            END ELSE
            PATCH_IF ("%app_duration%" != "%duration%") BEGIN
              SET "duration_check" = 1
            END
          END
        END
      END
      PATCH_IF ("%duration_check%" = 1) BEGIN
        PATCH_PRINT "%SOURCE_FILE% Warning: Limited duration effects on ability #%index% have mismatching durations"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% Warning: Limited duration effects on ability #%index% have mismatching durations"
        END
      END
    END
    FOR (index = 0 ; index < fx_num ; index = index + 1) BEGIN // check equipping effects
      READ_SHORT ("%fx_off%" +        ("%index%" * 0x30)) "opcode"
      READ_BYTE  ("%fx_off%" + 0x02 + ("%index%" * 0x30)) "target"
//      READ_BYTE  ("%fx_off%" + 0x03 + ("%index%" * 0x30)) "power"
      READ_BYTE  ("%fx_off%" + 0x0c + ("%index%" * 0x30)) "timing"
      READ_BYTE  ("%fx_off%" + 0x0d + ("%index%" * 0x30)) "dispel"
      READ_BYTE  ("%fx_off%" + 0x12 + ("%index%" * 0x30)) "prob1"
      READ_BYTE  ("%fx_off%" + 0x13 + ("%index%" * 0x30)) "prob2"
      PATCH_IF ("%target%" != 1) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) has an incorrect target"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) has an incorrect target"
        END
      END
/*
      PATCH_IF ("%power%" != 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) has an incorrect power"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) has an incorrect power"
        END
      END
*/
      PATCH_IF ("%timing%" != 2) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) has an incorrect timing mode"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) has an incorrect timing mode"
        END
      END
      PATCH_IF (("%dispel%" != 0) AND ("%dispel%" != 2)) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) can be dispelled"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) can be dispelled"
        END
      END
      PATCH_IF (("%prob1%" != 100) AND ("%prob2%" != 0)) BEGIN
        PATCH_PRINT "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) is not always applied (check your probabilities)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE%: Global Effect #%index% (opcode %opcode%) is not always applied (check your probabilities)"
        END
      END
    END
  END
  BUT_ONLY_IF_IT_CHANGES

APPEND ~debugger.log~ "// Item Checker - End Log"
COPY ~override/debugger.log~ ~G3_Debugging_Suite/debugger_item_checker.log~

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Spell Checker                                    \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
  
BEGIN ~Spell Checker~
NO_LOG_RECORD // so it can be used as much as wanted

COPY ~G3_Debugging_Suite/blank.log~ ~override/debugger.log~
APPEND ~debugger.log~ "// Spell Checker - Begin Log"

// index checker
COPY_EXISTING_REGEXP GLOB ~^%prefix%.+\.spl$~ ~override~
  PATCH_IF (SOURCE_SIZE < 0x72) BEGIN
    PATCH_PRINT "%SOURCE_FILE%: Invalid, below minimum size"
    INNER_ACTION BEGIN
      APPEND ~debugger.log~ "%SOURCE_FILE%: Invalid, below minimum size"
    END
  END ELSE BEGIN
    READ_SHORT 0x1c "spell_type"
    READ_LONG  0x34 "spell_level"
    READ_ASCII 0x3a "icon"
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"
    SET "fx_run_idx" = "%fx_num%"
    PATCH_IF (("%spell_type%" = 4) AND ("%spell_level%" != 1)) BEGIN
      PATCH_PRINT "%SOURCE_FILE% warning: Innate spells should be spell level one"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE% warning: Innate spells should be spell level one"
      END
    END  
    PATCH_IF (("%icon%" STRING_COMPARE_CASE "") AND ("%icon%" STRING_COMPARE_CASE "none")) BEGIN
      SET "exists" = 0
      INNER_PATCH_FILE ~%icon%.bam~ BEGIN
        SET "exists" = 1
      END
      PATCH_IF ("%exists%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Icon does not exist (%icon%.bam)"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Icon does not exist (%icon%.bam)"
        END
      END
    END
    PATCH_IF ("%abil_off%" != 0x72) BEGIN
      PATCH_PRINT "%SOURCE_FILE%: Abilities do not start at the proper offset"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Abilities do not start at the proper offset"
      END
    END
    PATCH_IF ("%fx_off%" != (0x72 + ("%abil_num%" * 0x28))) BEGIN
      PATCH_PRINT "%SOURCE_FILE%: Effects do not start at the proper offset"
      INNER_ACTION BEGIN
        APPEND ~debugger.log~ "%SOURCE_FILE%: Effects do not start at the proper offset"
      END
    END
    FOR (index = 0; index < abil_num; index = index + 1) BEGIN
      SET "duration_check" = 0
      SET "app_duration" = (0 - 1)
      READ_BYTE  ("%abil_off%" + 0x00 + (0x28 * "%index%")) "type"
      READ_BYTE  ("%abil_off%" + 0x02 + (0x28 * "%index%")) "slot"
      READ_ASCII ("%abil_off%" + 0x04 + (0x28 * "%index%")) "abil_icon"
      READ_SHORT ("%abil_off%" + 0x1e + (0x28 * "%index%")) "abil_fx_num"
      READ_SHORT ("%abil_off%" + 0x20 + (0x28 * "%index%")) "abil_fx_idx"
      PATCH_IF ((("%spell_type%"  = 4) AND ("%slot%" != 4)) OR     // innate not in innate slot
                (("%spell_type%" != 4) AND ("%slot%" != 2))) BEGIN // non-innate not in spell slots
        PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% appears in wrong place"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Ability #%index% appears in wrong place"
        END
      END
      PATCH_IF ("%type%" = 0) BEGIN
        PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% is extraneous Default(0) type"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% error: Ability #%index% is extraneous Default(0) type"
        END
      END
      PATCH_IF (("%abil_icon%" STRING_COMPARE_CASE "") AND ("%abil_icon%" STRING_COMPARE_CASE "none")) BEGIN
        SET "exists" = 0
        INNER_PATCH_FILE ~%abil_icon%.bam~ BEGIN
          SET "exists" = 1
        END
        PATCH_IF ("%exists%" = 0) BEGIN
          PATCH_PRINT "%SOURCE_FILE% error: Ability #%index% icon does not exist (%abil_icon%.bam)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE% error: Ability #%index% icon does not exist (%abil_icon%.bam)"
          END
        END
      END
      PATCH_IF ("%fx_run_idx%" = "%abil_fx_idx%") BEGIN
        SET "fx_run_idx" = ("%fx_run_idx%" + "%abil_fx_num%")
      END ELSE BEGIN
        PATCH_PRINT "%SOURCE_FILE% has an index error"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE%: Ability #%index% has an index error"
        END
      END
      FOR (index2 = 0 ; index2 < abil_fx_num ; index2 = index2 + 1) BEGIN
        READ_SHORT ("%fx_off%" +        (("%index2%" + "%abil_fx_idx%") * 0x30)) "opcode"
        READ_BYTE  ("%fx_off%" + 0x0c + (("%index2%" + "%abil_fx_idx%") * 0x30)) "timing"
        READ_LONG  ("%fx_off%" + 0x0e + (("%index2%" + "%abil_fx_idx%") * 0x30)) "duration"
        PATCH_IF ((("%timing%" = 1) OR ("%timing%" = 9)) AND ("%duration%" > 0)) BEGIN
          PATCH_PRINT "%SOURCE_FILE%: Ability #%index% has a permanent effect with non-zero duration (effect #%index2%, opcode %opcode%)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE%: Ability #%index% has a permanent effect with non-zero duration (effect #%index2%, opcode %opcode%)"
          END
        END
        PATCH_IF (("%timing%" = 2) OR ("%timing%" = 5) OR ("%timing%" = 6) OR ("%timing%" = 8)) BEGIN
          PATCH_PRINT "%SOURCE_FILE%: Ability #%index% has an effect with incorrect/unknown timing (effect #%index2%, opcode %opcode%)"
          INNER_ACTION BEGIN
            APPEND ~debugger.log~ "%SOURCE_FILE%: Ability #%index% has an effect with incorrect/unknown timing (effect #%index2%, opcode %opcode%)"
          END
        END
        PATCH_IF (("%timing%" = 0) OR ("%timing%" = 3) OR ("%timing%" = 4) OR ("%timing%" = 7)) BEGIN
          PATCH_IF (("%duration_check%" = 0) AND ("%duration%" > 5)) BEGIN
            PATCH_IF ("%app_duration%" < 0) BEGIN
              SET "app_duration" = "%duration%"
            END ELSE
            PATCH_IF ("%app_duration%" != "%duration%") BEGIN
              SET "duration_check" = 1
            END
          END
        END
      END
      PATCH_IF ("%duration_check%" = 1) BEGIN
        PATCH_PRINT "%SOURCE_FILE% Warning: Limited duration effects on ability #%index% have mismatching durations"
        INNER_ACTION BEGIN
          APPEND ~debugger.log~ "%SOURCE_FILE% Warning: Limited duration effects on ability #%index% have mismatching durations"
        END
      END
    END
  END
  BUT_ONLY_IF_IT_CHANGES

APPEND ~debugger.log~ "// Spell Checker - End Log"
COPY ~override/debugger.log~ ~G3_Debugging_Suite/debugger_spell_checker.log~